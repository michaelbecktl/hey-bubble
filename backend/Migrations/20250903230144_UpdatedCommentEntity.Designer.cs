// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250903230144_UpdatedCommentEntity")]
    partial class UpdatedCommentEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Entity.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Content = "Hi!",
                            CreatedAt = new DateTime(2025, 8, 20, 10, 9, 0, 0, DateTimeKind.Unspecified),
                            LikeCount = 1,
                            PostId = 1,
                            UserId = -3
                        },
                        new
                        {
                            CommentId = 2,
                            Content = "Hey there!",
                            CreatedAt = new DateTime(2025, 8, 20, 10, 16, 0, 0, DateTimeKind.Unspecified),
                            LikeCount = 1,
                            PostId = 1,
                            UserId = -2
                        });
                });

            modelBuilder.Entity("Backend.Entity.CommentLike", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentLikes");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            UserId = -2
                        },
                        new
                        {
                            CommentId = 1,
                            UserId = -3
                        });
                });

            modelBuilder.Entity("Backend.Entity.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int?>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            CommentCount = 2,
                            Content = "Hi everyone! Welcome to Bubble!",
                            CreatedAt = new DateTime(2025, 8, 20, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            LikeCount = 2,
                            UserId = -1
                        },
                        new
                        {
                            PostId = 2,
                            Content = "Ohayo everyone! Nice to meet you!",
                            CreatedAt = new DateTime(2025, 8, 20, 10, 12, 0, 0, DateTimeKind.Unspecified),
                            UserId = -3
                        });
                });

            modelBuilder.Entity("Backend.Entity.PostLike", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            UserId = -1
                        },
                        new
                        {
                            PostId = 2,
                            UserId = -1
                        });
                });

            modelBuilder.Entity("Backend.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maya@heybubble.co.nz",
                            Password = "$2a$12$J8d2vGlMWUiW6dWIszp2F.rzAw7qBYq5Hbd/6ijGX5o6x3Q5oX2G2",
                            Username = "mayauser"
                        },
                        new
                        {
                            Id = -3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@heybubble.co.nz",
                            Password = "$2a$11$fzXCnjrZ3KKnm3nI1nbdm.XQjaF3x/mXUIcmWMe3r2dMjBsSuRQ7u",
                            Username = "aliceuser"
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hana@heybubble.co.nz",
                            Password = "$2a$12$kMngNi/lnbyCxnixyC7Swuq99AWEvm9YGk8M.y9uneD49W3wJqvWm",
                            Username = "hanauser"
                        });
                });

            modelBuilder.Entity("Backend.Entity.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<int>("Followers")
                        .HasColumnType("int");

                    b.Property<int>("Following")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearningLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            UserId = -1,
                            Country = "NZ",
                            DisplayName = "Maya",
                            Dob = new DateOnly(1991, 12, 6),
                            Followers = 1,
                            Following = 1,
                            Gender = "Female",
                            LearningLanguage = "JP",
                            NativeLanguage = "EN"
                        },
                        new
                        {
                            UserId = -2,
                            Country = "NZ",
                            DisplayName = "Alice",
                            Dob = new DateOnly(1991, 7, 2),
                            Followers = 1,
                            Following = 0,
                            Gender = "Female",
                            LearningLanguage = "JP",
                            NativeLanguage = "EN"
                        },
                        new
                        {
                            UserId = -3,
                            Country = "NZ",
                            DisplayName = "Hana",
                            Dob = new DateOnly(2001, 1, 31),
                            Followers = 1,
                            Following = 2,
                            Gender = "Female",
                            LearningLanguage = "EN",
                            NativeLanguage = "JP"
                        });
                });

            modelBuilder.Entity("Backend.Entity.Comment", b =>
                {
                    b.HasOne("Backend.Entity.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entity.CommentLike", b =>
                {
                    b.HasOne("Backend.Entity.Comment", "Comment")
                        .WithMany("CommentLike")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Entity.User", "User")
                        .WithMany("CommentLike")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entity.Post", b =>
                {
                    b.HasOne("Backend.Entity.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entity.PostLike", b =>
                {
                    b.HasOne("Backend.Entity.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Entity.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entity.UserProfile", b =>
                {
                    b.HasOne("Backend.Entity.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Backend.Entity.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entity.Comment", b =>
                {
                    b.Navigation("CommentLike");
                });

            modelBuilder.Entity("Backend.Entity.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("Backend.Entity.User", b =>
                {
                    b.Navigation("CommentLike");

                    b.Navigation("Comments");

                    b.Navigation("PostLikes");

                    b.Navigation("Posts");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
